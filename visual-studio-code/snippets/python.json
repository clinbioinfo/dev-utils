{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ppp-open-read-file" : {
		"prefix": "ppp-open-read-file",
		"body": [
			"with open(${1:infile}, 'r') as fh:",
			"    for line in fh:",
			"        line = line.strip()",
			"        if line.startswith('#'):",
			"            continue",
			"        $0"
		],
		"description": "open a text file in read mode"
	},
	"ppp-check-is-dir" : {
		"prefix": "ppp-check-is-dir",
		"body": [
			"if not os.path.isdir(${1:indir}):",
			"    logger.error(\"'{}' is not a directory\".format(${1:indir}))",
			"    print(\"'{}' is not a directory\".format(${1:indir}))",
			"    sys.exit(1)",
			"",
			"$0"
		],
		"description": "check if directory is a directory"
	},
	"ppp-check-dir-exists" : {
		"prefix": "ppp-check-dir-exists",
		"body": [
			"if not os.path.exists(${1:indir}):",
			"    logger.error(\"directory '{}' does not exist\".format(${1:indir}))",
			"    print(\"directory '{}' does not exist\".format(${1:indir}))",
			"    sys.exit(1)",
			"",
			"$0"
		],
		"description": "check if directory exists"
	},
	"ppp-log-info" : {
		"prefix": "ppp-log-info",
		"body": [
			"logging.info(\"${1:text}\")",
			"$0"
		],
		"description": "log info"
	},
	"ppp-log-warning" : {
		"prefix": "ppp-log-warning",
		"body": [
			"logging.warning(\"${1:text}\")",
			"$0"
		],
		"description": "log warning"
	},
	"ppp-log-error" : {
		"prefix": "ppp-log-error",
		"body": [
			"logging.error(\"${1:text}\")",
			"$0"
		],
		"description": "log error"
	},
	"ppp-print-green" : {
		"prefix": "ppp-print-green",
		"body": [
			"print(Fore.GREEN + \"${1:text}\")",
			"print(Style.RESET_ALL + '', end='')",
			"$0"
		],
		"description": "print green"
	},
	"ppp-print-red" : {
		"prefix": "ppp-print-red",
		"body": [
			"print(Fore.RED + \"${1:text}\")",
			"print(Style.RESET_ALL + '', end='')",
			"$0"
		],
		"description": "print red"
	},
	"ppp-print-yellow" : {
		"prefix": "ppp-print-yellow",
		"body": [
			"print(Fore.YELLOW + \"${1:text}\")",
			"print(Style.RESET_ALL + '', end='')",
			"$0"
		],
		"description": "print yellow"
	},
	"ppp-check-infile-status" : {
		"prefix": "ppp-check-infile-status",
		"body": [
			"def _check_infile_status(self, infile: str = None) -> None:",
			"    '''Check the input file for the following:",
			"    1) does the file variable defined",
			"    2) does the file exist",
			"    3) does the file a regular file or a file symlink",
			"    4) does the file have content",
			"    :param infile: {str} - input file to check status of",
			"    '''",
			"",
			"    if infile is None or infile == '':",
			"        logging.error(\"'{}' is not defined'\".format(infile))",
			"        sys.exit(1)",
			"",
			"    if not os.path.exists(infile):",
			"        logging.error(\"file '{}' does not exist'\".format(infile))",
			"        sys.exit(1)",
			"",	
			"    if not os.path.isfile(infile):",
			"        logging.error(\"'{}' is not a regular file or a symlink to a file\".format(infile))",
			"        sys.exit(1)",
			"",
			"    if not os.stat(infile) == 0:",
			"        logging.error(\"file '{}' has no content\".format(infile))",
			"        sys.exit(1)",
			"",
			"$0"
		],
		"description": "check infile status"
	},
	"ppp-for-each-file-in-directory" : {
		"prefix": "ppp-for-each-file-in-directory",
		"body": [
			"file_ctr = 0",
			"for path, subdirs, files in os.walk(${1:indir}):",
			"    for name in files:",			
			"       file_ctr += 1",
			"       file_path = os.path.join(path, name)",
			"",			
			"print(\"Processed '{}' files in directory '{}'\".format(file_ctr, ${1:indir}))",			
			"$0"
		],
		"description": "for each file in directory"
	},

}